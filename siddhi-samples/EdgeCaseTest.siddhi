@App:name("EdgeCaseTest")
@App:description("Test As Many Situations As Possible For The Editor Drag-And-Drop Implementation")
@app:statistics(reporter = 'console')
@app:playback(idle.time = '100 millisecond', increment = '2 sec')

-- Other Inputs
define stream TradeStream (symbol string, price double, volume long, timestamp long);
define aggregation TradeAggregation
  from TradeStream
  select symbol, avg(price) as avgPrice, sum(price) as total
    group by symbol
    aggregate by timestamp every sec ... year;
define stream StockStream (symbol string, value int);
define stream TempStream(deviceID long, roomNo int, temp double);
define table TempTable(deviceID long, roomNo int, temp double);
define stream RegulatorStream(deviceID long, roomNo int, isOn bool);\
define table RoomTypeTable (roomNo int, type string);
define stream TempStream (deviceID long, roomNo int, temp double);
define window TwoMinTempWindow (roomNo int, temp double) time(2 min);
define stream CheckStream (requestId string);
define table RoomTypeTable (roomNo int, type string);
define stream DeleteStream (roomNumber int);
define table RoomOccupancyTable (roomNo int, people int);
define stream UpdateStream (roomNumber int, arrival int, exit int);
define table RoomAssigneeTable (roomNo int, type string, assignee string);
define stream RoomAssigneeStream (roomNumber int, type string, assignee string);
define table ServerRoomTable (roomNo int);
define stream TempStream (deviceID long, roomNo int, temp double);
define stream InStream(name string, age int);
define stream RegulatorStateChangeStream(deviceID long, roomNo int, tempSet double, action string);
define stream RoomKeyStream(deviceID long, roomNo int, action string);

-- Test Stream (Source & Sink)
@source(type='email' , username='option_value',password='option_value',folder.to.move='option_value', @map(type='json'))
@primaryKey('name')
@sink(type='log')
@source(type='inMemory', topic='stock', @map(type='xml', namespaces = "dt=urn:schemas-microsoft-com:datatypes", enclosing.element="//portfolio", @attributes(symbol = "company/symbol", price = "price", volume = "volume"))) define stream FooStream (symbol string, price float, volume long);
@sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element='<portfolio>', validate.xml='true', @payload( "<StockData><Symbol>{{symbol}}</Symbol><Price>{{price}}</Price></StockData>"))) define stream BarStream (symbol string, price float, volume long);
define stream TestStream1(name string, age int);
define stream TestStream2(val1 int, val2 long, val3 double, val4 float, val5 string, val6 bool, val7 object);

-- Test Table
@store(type='rdbms' , jdbc.url='option_value',username='option_value',password='option_value',jdbc.driver.name='option_value')
@primaryKey('name')
define table TestTable1(name string);

-- Test Window
@async(buffer.size='64')
define window TestWindow1(name string) time(1 hour);

-- Test Trigger
define trigger TestTrigger1 at every 2 hours;

-- Test Aggregation
@store(type='rdbms' , jdbc.url='option_value',username='option_value',password='option_value',jdbc.driver.name='option_value')
define aggregation TestAggregation1
    from TestStream1
    select name, avg(age) as avgAge
    group by name
    aggregate every hour, sec;

-- Test Function
define function TestFunction[JavaScript] return bool {
    var boolIn1 = data[0];
    return boolIn1;
};

-- Test Window-Filter-Projection Query
from TestStream1[age > 18]#window.time(10 min)[age < 30][name == "mark"]
select name, convert(age, 'string') as ageStr
group by name
having ageStr == '20'
order by name
limit 500
output every 10 min
insert into OutStream1;

-- Test Join Query
from StockStream as S join TradeAggregation as T
  on S.symbol == T.symbol
  within "2014-02-15 00:00:00 +05:30", "2014-03-16 00:00:00 +05:30"
  per "days"
select S.symbol, T.total, T.avgPrice
insert into AggregateStockStream;

from TempStream[temp > 30.0]#window.time(1 min) as T
  join RegulatorStream[isOn == false]#window.length(1) as R
  on T.roomNo == R.roomNo
select T.roomNo, R.deviceID, 'start' as action
insert into RegulatorActionStream;

from TempStream join RoomTypeTable
    on RoomTypeTable.roomNo == TempStream.roomNo
select deviceID, RoomTypeTable.type as roomType, type, temp
    having roomType == 'server-room'
insert into ServerRoomTempStream;

from CheckStream as C join TwoMinTempWindow as T
    on T.temp > 40
select requestId, count(T.temp) as count
insert into HighTempCountStream;

-- Test Pattern Query
from every e1=InStream[age >= 18]<1:10> ->
    every e2=InStream[age < 30] and e3=InStream[name!="dave"] ->
    every e4=InStream[age < 50] or e5=InStream[name!="mark"] ->
    every not InStream[age > 60] for 5 sec ->
    every not InStream[age < 18] and e6=InStream[age > 30]
select e1.name, e1.age as above18
insert into OutStream;

from every( e1=RegulatorStream) -> e2=TempStream[e1.roomNo==roomNo]<1:> -> e3=RegulatorStream[e1.roomNo==roomNo]
select e1.roomNo, e2[0].temp - e2[last].temp as tempDiff
insert into TempDiffStream;

from every( e1=RegulatorStateChangeStream[ action == 'on' ] ) ->
      e2=RoomKeyStream[ e1.roomNo == roomNo and action == 'removed' ] or e3=RegulatorStateChangeStream[ e1.roomNo == roomNo and action == 'off']
select e1.roomNo, ifThenElse( e2 is null, 'none', 'stop' ) as action
having action != 'none'
insert into RegulatorActionStream2;

-- Test Sequence Query
from every e1=InStream[age >= 18]+,
    e2=InStream[age > 18] and e3=InStream[age < 30],
    not InStream[age >= 18] for 5 sec,
    not InStream[age < 18] and event6=InStream[age > 30]
select e1.name, e1.age as above18
insert into OutStream;

from every e1=TempStream, e2=TempStream[e1.temp + 1 < temp]
select e1.temp as initialTemp, e2.temp as finalTemp
insert into AlertStream;

from every e1=TempStream, e2=TempStream[e1.temp <= temp]+, e3=TempStream[e2[last].temp > temp]
select e1.temp as initialTemp, e2[last].temp as peakTemp
insert into PeekTempStream;

-- Test Query Insert Output
from TempStream
select *
insert into TempTable;

-- Test Query Delete Output
from DeleteStream
delete RoomTypeTable
    on RoomTypeTable.roomNo == roomNumber;

-- Test Query Update Output
from UpdateStream
select *
update RoomOccupancyTable
    set RoomOccupancyTable.people = RoomOccupancyTable.people + arrival - exit
    on RoomOccupancyTable.roomNo == roomNumber;

-- Test Update or Insert Into Output
from RoomAssigneeStream
select roomNumber as roomNo, type, assignee
update or insert into RoomAssigneeTable
    set RoomAssigneeTable.assignee = assignee
    on RoomAssigneeTable.roomNo == roomNo;

-- Test 'in' Keyword
from TempStream[ServerRoomTable.roomNo == roomNo in ServerRoomTable]
insert into ServerRoomTempStream2;

-- Test Partition
